// This file was generated by HExpand v 1.6
//
///////////////////////////////// [_citkUtils.h]
#ifndef _CITKUTILS_H_INCLUDED_
#define _CITKUTILS_H_INCLUDED_
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////// [citkUtilsVersion.h]
// This file was generated by HExpand v 1.6
//
#define CITK_UTILS_VER 7
///////////////////////////////// [citkUtilsVersion.h] END
#ifndef ONLY_VERSION_INFO
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Defines for MS VC++ compiler
#ifdef _MSC_VER
#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
#ifndef CITK_NO_DEFAULTLIB
# ifdef CITKUTILS_IMPORTS
#  pragma comment (lib,"citkUtils.lib")
# endif
#endif // !CITK_NO_DEFAULTLIB
#endif // _MSC_VER
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////// [citkUtils_Main.h]
#ifndef CITKUTILSMAIN_H_INCLUDED
#define CITKUTILSMAIN_H_INCLUDED
#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
#ifndef CITK_IMPORTS
# ifdef CITKUTILS_EXPORTS
#  define CITK_IMPORTS
# elif defined CITKUTILS_IMPORTS
#  define CITK_IMPORTS
# endif
#endif
#include <citk.h>
#ifndef CITK_API
#define CITK_API
#endif
#ifdef CITKUTILS_EXPORTS
# undef CITK_API
# define CITK_API DLL_EXPORT
#endif
#ifdef CITKUTILS_IMPORTS
# undef CITK_API
# define CITK_API DLL_IMPORT
#endif
#endif // #ifndef CITKUTILSMAIN_H_INCLUDED
///////////////////////////////// [citkUtils_Main.h] END
// Add header files that need to be published here
///////////////////////////////// [citk_2DFace.h]
#ifndef _2DFACE_H_INCLUDED
#define _2DFACE_H_INCLUDED
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
using namespace citkTypes;
using namespace citk;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
DLL_DECLARE_CLASSDESC( CT2DFace );
class CITK_API CT2DFace : public CTGeometry
{
	DECLARE_ALL( CT2DFace, CTGeometry );
public:
	// Constructor
	CT2DFace();
	CT2DFace( const CT2DFace* ); // copy c'tor
	// Creates a copy
	virtual CTEntity*	Copy() const;
	// VertexData.
	PVertexData		VertexData; // Same as Data(0)
	// all VD params
	// Base color for the Vertices; ditto!
	DColorA			BaseColor;
	// Number of frames in the texture. Numbering goes form 0 up, like you read text
	int				xframes;
	int				yframes;
	// Anim. update rate ("frametime") (0 is every frame)
	float			rate;
	// loop: <0 is forever, 0 is NO-wait at end (or begin if bounce=true), >0 counts down to 0
	int				loop;
	// bounce at end.
	bool			bounce;
	// current frame
	int				frame;
	// Set if you changed anything that should be updated in the VertexData
	bool			invalid;
	// 3d pos interface
	bool	Auto3DPos;
	Vector	Pos3D;
	SafePtr<CTEntity> Relative3D;
	float	Max3DDist;
	bool	Stick2Edge;
	void	SetAuto3DPos( cvec_t pos3d, bool edge, CTEntity* rel, float maxdist=-1 );
	void	StopAuto3DPos();
	// Force Camera Interface
	CTCamera* ForceCamera; // No need to be safe, pointer is just compared, never referenced
	// PixelSize interface
	bool	AutoSize;
	int		XPixels;
	int		YPixels;
	void	SetAutoSize( int width, int height );
	void	StopAutoSize();
	// PixelPos interface
	bool	AutoPos; // 3d wins if both are enabled
	enum	rel_t { Center, Left, Right, Bottom, Top } XRelative, YRelative;
	int		XPos;
	int		YPos;
	void	SetAutoPos( int x, int y, rel_t xrel=Center, rel_t yrel=Center);
	void	StopAutoPos();
	// Update animation
	void			Animate( double dtime );
	// User can add update for this one here, so Animate is called automatically every frm
	UPDATEFUNC		AutoUpdate( ctime_t dt );
	// Draw it in the VD.
	virtual void	UpdateVD();
	// This one is in the RenderState by default, change it as you wish
	StrongPtr<CTRenderFlagsProperty> RenderFlags;
	// This one is in the RenderState by default, change it as you wish
	StrongPtr<CTAlphaProperty> AlphaProp;
	// Inherited; renders the 2d face
	virtual void	Process( ProcessInfo_t& );
	// Inherited; returns NULL (no BV since we render in viewport/pixel space)
	virtual CTShape*	UpdateBoundingVolume( kind_t );
private:
	// if <=0, go to next frame.
	float		countdown;
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
typedef StrongPtr<CT2DFace> P2DFace;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#endif // _2DFACE_H_INCLUDED
///////////////////////////////// [citk_2DFace.h] END
///////////////////////////////// [citk_AbstractMaterials.h]
#ifndef CTABSTRACTMATERIALS_INCLUDED
#define CTABSTRACTMATERIALS_INCLUDED
 
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
using namespace citkTypes;
using namespace citk;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
DLL_DECLARE_CLASSDESC(CTAbstractMaterial);
class CITK_API CTAbstractMaterial : public CTExtraData
{
	DECLARE_ALL(CTAbstractMaterial,CTExtraData);
protected:
	~CTAbstractMaterial();
public:
	CTAbstractMaterial();
	PRenderState	OrigRS;
	PRenderState	AbstractRS;
	bool			HideIfNull;
	static CTAbstractMaterial* CreateFor( CTEntity*, const DColor& col );
	static void		Abstract( CTEntity* );
	static void		Orig( CTEntity* );
	static void		AbstractAll();	// Sets 'default' to abstract
	static void		OrigAll();		// Sets 'default' to orig
	static void		DefaultAll();	// Sets all to last All-call 'default'
	void			Abstract();
	void			Orig();
	void			Default();
	const ArrayPtr<CTAbstractMaterial>& GetInstances() const { return All; }
	// No touchy!
	CTEntity*		Owner;
	static bool		IsDefaultAbstract() { return DefaultIsAbstract; }
private:
	static ArrayPtr<CTAbstractMaterial> All;
	static bool		DefaultIsAbstract;	// false: default is orig
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
typedef StrongPtr<CTAbstractMaterial> PAbstractMaterial;
///////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#endif // !CTABSTRACTMATERIALS_INCLUDED
///////////////////////////////// [citk_AbstractMaterials.h] END
///////////////////////////////// [citk_Blinker.h]
#ifndef OBJECTBLINKER_H_INCLUDED
#define OBJECTBLINKER_H_INCLUDED
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
using namespace citkTypes;
using namespace citk;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
DLL_DECLARE_CLASSDESC( CTObjectBlinker );
class CITK_API CTObjectBlinker : public CTAggregated
{
	DECLARE_ALL( CTObjectBlinker, CTAggregated );
public:
	CTObjectBlinker();
	bool		SetObject( CTEntity*, const DColor&, bool ShowPivot=false, bool HighLight=true );
	void		Clear();
	ctime_t		Interval;
	virtual void OnDelete( CTAggregated* );
	CTEntity*	GetEntity() const;
	static CTObjectBlinker* GetBlinker( CTEntity* ); // I may blink only when I am the returned value
	bool		IsHighlit() const;
	PMaterialProperty MP; // Customizable
	bool		SmartBlink; // Blink as IVTools expects: Only Direct helper childs, not 'useful' child objects
	CTRenderState* GetBlinkerRS() const { return BlinkerRS; }
	// TEMP: Viewport that should POST_DRAW the pivot
	static		DViewport*	PivotViewport;
protected:
	~CTObjectBlinker();
private:
	// To prevent problems with multiples
	static ArrayPtr<CTObjectBlinker> Blinkers;
	// Blink functions
	UPDATEFUNC	DoBlink( ctime_t );
	ctime_t timer; // increasing
	CTEntity*	Entity;
	PRenderState	BlinkerRS;
	struct actualblinker_t
	{
		PRenderState	ERS;
		SafePtr<CTEntity> Entity;
		bool			HighLight; // if not, just pivot
		PGeometry		WorldPivot, TransPivot;
		float			PivotScale;
	};
	ArrayPtr<actualblinker_t> ActualBlinkers;
	void			AddActualBlinker( CTEntity*, bool PV, bool HL=true );
	void			Pause();
	bool			Paused;
	static PRenderState	WorldPivotRS;
	static PRenderState TransPivotRS;
	static PVertexData	WorldPivotVD;
	static PVertexData	TransPivotVD;
	static void		CreatePivot();
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
typedef StrongPtr<CTObjectBlinker> PObjectBlinker;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#endif // OBJECTBLINKER_H_INCLUDED
///////////////////////////////// [citk_Blinker.h] END
///////////////////////////////// [citk_MessageHud.h]
#ifndef CTMESSAGEHUD_H_INCLUDED
#define CTMESSAGEHUD_H_INCLUDED
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
using namespace citkTypes;
using namespace citk;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
DLL_DECLARE_CLASSDESC( CTMessageHud );
class CITK_API CTMessageHud : public CTProcess
{
	DECLARE_ALL( CTMessageHud, CTProcess );
public:
	CTMessageHud();
	void Init(); // .. or it won't do anything
	void AddLine( cstr_t Text ) { AddLine( Text, Setup.Color ); }
	void AddLine( cstr_t Text, const DColor& col );
	void AddLine( cstr_t Prefix, cstr_t Text ) { AddLine( Prefix, Text, Setup.Color ); }
	void AddLine( cstr_t Prefix, cstr_t Text, const DColor& col );
	virtual void Process( ProcessInfo_t& );
	struct Setup_t
	{
		String				FontName;
		bool				FontProportional;
		float__t			FontSizeX;
		float__t			FontSizeY;
		float__t			FontSpacing;
		DFlags				RenderFlags;
		DColor				Color;
		float__t			Alpha;
		ctime_t				TTL;
		ctime_t				FadeTime;
		Vector				BottomLeft;
		Setup_t();
	} Setup;
private:
	virtual ~CTMessageHud();
	UPDATEFUNC				Animate( ctime_t dt );
	// Strong Array of all 3dtexts we ever made
	StrongArray<CT3DText>	AllTexts;
	// Array of unused 3dtexts: faster because we don't have to construct (=read texture) every time
	ArrayPtr<CT3DText>	UnusedTexts;
	struct Item_t
	{
		P3DText	Text;
		String	_text;
		ctime_t	Time; // starts at 0
		Item_t( CT3DText* f ): Time(0) { Text = f; }
	};
	CT3DText*	GetText();
	void		UpdateItem( int no, cfloat__t dy );
	ArrayPtr<Item_t> Items;
	bool Inited; //see if we;re inited (animating)
	// No queuing
	void _AddLine( cstr_t Text, const DColor& col );
	// Lifo queue
	struct newitem_t
	{
		String Text;
		DColor Color;
	};
	ArrayPtr<newitem_t> _Fifo;
	void	FifoPush( cstr_t, const DColor& );
	bool	FifoPop( String&, DColor& ); // Use a.s.a.p, return value only ok until next call
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
typedef StrongPtr<CTMessageHud> PMessageHud;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#endif // CTMESSAGEHUD_H_INCLUDED
///////////////////////////////// [citk_MessageHud.h] END
///////////////////////////////// [citk_SkyGroup.h]
#ifndef CTSKYGROUP_H_INCLUDED
#define CTSKYGROUP_H_INCLUDED
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
using namespace citk;
//DLL_DECLARE_CLASSDESC( CTSkyGroup );
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
class CTSkyGroup : public CTGroup
{
//	DECLARE_ALL( CTSkyGroup, CTGroup );
public:
	CTSkyGroup( cstr_t name =NULL, CTGroup* parent =NULL ) : CTGroup(name,parent) 
	{
		// Sky box should never update the depth buffer
		PRenderFlagsProperty rfp; rfp.New();
		rfp->SetFlag(CTRenderFlagsProperty::NO_DEPTH_UPDATE);
		PRenderState rs = CreateRenderState();
		rs->SetRenderProperty(rfp);
		// Never inherited transformation
		LockTransform();
	}
	virtual void Process( ProcessInfo_t &processinfo )
	{
		RenderInfo_t &ri = processinfo.RenderInfo;
		if (ri.Context->Camera)
		{
			// Always move to the camera position (horizontally)
			Vector p = ri.Context->Camera->GetWorldPosition();
			p.y = 0.0f;
			MoveTo( p );
			CTGroup::Process(processinfo);
		}
	}
};
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
typedef StrongPtr<CTSkyGroup> PSkyGroup;
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#endif // !CTSKYGROUP_H_INCLUDED
///////////////////////////////// [citk_SkyGroup.h] END
///////////////////////////////// [citk_SoloViewer.h]
///////////////////////////////////////////////////////////////////////////////
#ifndef CITK_SOLOVIEWER_H_INCLUDED
#define CITK_SOLOVIEWER_H_INCLUDED
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
using namespace citk;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
DLL_DECLARE_CLASSDESC( CTSoloViewer );
class CITK_API CTSoloViewer : public CTReferenced
{
	DECLARE_ALL( CTSoloViewer, CTReferenced );
public:
	void	Init( CTEntity* object, float dist, float el, float rotate );
	CTCamera*	GetCamera( CTCamera* def=NULL) const;
	PCamera		Camera;
	PGroup		CamRoot;
	PGroup		Root;
	PMotionController	Controller;
};
///////////////////////////////////////////////////////////////////////////////
typedef StrongPtr<CTSoloViewer> PSoloViewer;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#endif // defined CITK_SOLOVIEWER_H_INCLUDED
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////// [citk_SoloViewer.h] END
///////////////////////////////// [citk_ToolTip.h]
#ifndef _TOOLTIP_H_INCLUDED
#define _TOOLTIP_H_INCLUDED
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
using namespace citkTypes;
using namespace citk;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
DLL_DECLARE_CLASSDESC( CTToolTip );
class CITK_API CTToolTip : public CT2DFace
{
	DECLARE_ALL( CTToolTip, CT2DFace );
public:
	// Constructor
	CTToolTip();
	CTToolTip(const CTToolTip* src);
	// Set Text. This will create Tex and Texprop
	void					SetText( cstr_t text );
	// Creates a copy
	virtual CTEntity*	Copy() const;
	// Draw it in the VD.
	virtual void			UpdateVD();
	// Update scale so it fits; update pos to match camera-2-3dpos (if enabled)
	virtual void			Process( ProcessInfo_t& pi );
	void					SetFont(cstr_t, int);
private:
	// Contains text texture
	PTexture						Texture;
	// This one is in the RenderState by default
	StrongPtr<CTTextureProperty>	TextureProp;
	// VertexData.
	PVertexData		EdgeData; // Same as Data(1)
	DynString		LastText; // prevent unnecessary updates
	DynString		FontName;
	int				FontSize;
};
typedef StrongPtr<CTToolTip> PToolTip;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#endif // _TOOLTIP_H_INCLUDED
///////////////////////////////// [citk_ToolTip.h] END
///////////////////////////////// [citk_Volumes.h]
///////////////////////////////////////////////////////////////////////////////
#ifndef CITK_CALCVOLUMES_H_INCLUDED
#define CITK_CALCVOLUMES_H_INCLUDED
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
using namespace citk;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
float CITK_API CalcVolume( CTVertexData* vd ); // Calc volume of this vd. Openings will be closed for calculation!
float CITK_API CalcVolume( CTGeometry* geo ); // Calc Volume of all vd's
float CITK_API CalcVolume( CTGroup* r ); // Calc volume of whole tree
float CITK_API CalcVolume( CTEntity* e ); // Calc volume of whole tree or geom
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#endif // defined CITK_CALCVOLUMES_H_INCLUDED
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////// [citk_Volumes.h] END
///////////////////////////////// [citk_AxisTracker.h]
///////////////////////////////////////////////////////////////////////////////
#ifndef CITK_AXISTRACKER_H_INCLUDED
#define CITK_AXISTRACKER_H_INCLUDED
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
using namespace citk;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class CITK_API DAxisTracker
{
public:
	DAxisTracker();
	~DAxisTracker();
	void	Init( float maxage, float threshold );
	bool	Update( float value, float dt );
	float	CalcAverage( float time );
private:
	struct meas_t
	{
		float	age;
		float	value;
	};
	static DMemoryPool<meas_t> MeasPool;
	ArrayPtr<meas_t> Meas;
	float	maxage;
	float	threshold;
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#endif // defined CITK_AXISTRACKER_H_INCLUDED
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////// [citk_AxisTracker.h] END
///////////////////////////////// [citk_Snapper.h]
#ifndef SNAPPER_H_INCLUDED
#define SNAPPER_H_INCLUDED
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
using namespace citk;
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class CITK_API DSnapper
{
public:
	DSnapper( cstr_t exporterclass=_T("CTJpegExport") );
	~DSnapper();
	void Init( cstr_t filemask, CTRenderTarget* rt, float fps );
	void Snap();
	String FileMask;
protected:
	int no;
	PBitmapExport pbe;
	PTexture tex;
	SafePtr<CTRenderTarget> render;
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#endif // !SNAPPER_H_INCLUDED
///////////////////////////////// [citk_Snapper.h] END
///////////////////////////////// [citk_PIDController.h]
//  Copyright (C) 1998-2002 Crystal Intertechnology BV.  All rights reserved.
//  
//  This file is part of citk.
//  
//  citk is distributed with NO WARRANTY OF ANY KIND.  No author or
//  distributor accepts any responsibility for the consequences of using it,
//  or for whether it serves any particular purpose or works at all, unless
//  he or she says so in writing.  Refer to the Crystal Intertechnology
//  License (the "License") for full details.
//  
//
#ifndef CITK_PIDCONTROLLER_H_INCLUDED
#define CITK_PIDCONTROLLER_H_INCLUDED
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#include <citkTypes.h>
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
DLL_DECLARE_CLASSDESC(CTPIDController);
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
namespace citk {
	
/////////////////////////////////////////////////////////////////////////////
class CITK_API CTPIDController : public CTController
{
	DECLARE_ALL(CTPIDController, CTController);
public:
	CTPIDController();
	// Reset the controller to its initial state
	virtual void	Reset();
	void			SetPID( double KP, double KI, double KD );
	void			SetActuatorBounds( double minval, double maxval);
	double			GetActuatorValue( double interval, double currentvalue, double targetvalue );
	// For streaming / networking:
	virtual void	WriteToStream( CTStream* stream, streamlod_t lod );
	virtual bool	ProcessChunk( CTStream* stream, chunkid_t chid );
protected:
	virtual void DoAddProperties();
private:
	float__t		kp, ki, kd;
	float__t		last_error, integral_error;
	float__t		ac_min, ac_max;
	bool		actuatoroverflowed;
};
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
typedef StrongPtr<CTPIDController> PPIDController;
///////////////////////////////////////////////////////////////////////////////////////
} // namespace citk
	
/////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
#endif // !CITK_PIDCONTROLLER_H_INCLUDED
///////////////////////////////// [citk_PIDController.h] END
///////////////////////////////// [citk_Profiler.h]
//  Copyright (C) 1998-2002 Crystal Intertechnology BV.  All rights reserved.
//  
//  This file is part of citk.
//  
//  citk is distributed with NO WARRANTY OF ANY KIND.  No author or
//  distributor accepts any responsibility for the consequences of using it,
//  or for whether it serves any particular purpose or works at all, unless
//  he or she says so in writing.  Refer to the Crystal Intertechnology
//  License (the "License") for full details.
//  
//
#ifndef CITK_PROFILER_H_INCLUDED
#define CITK_PROFILER_H_INCLUDED
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#ifndef _CITK_H_INCLUDED_
#include "..\..\citkCore\Devices\citk_Timer.h"
#endif
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
namespace citk {
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class CITK_API DProfiler
{
public:
	DProfiler( cstr_t _function_name ) ;
	~DProfiler();
	inline ctime_t operator () ( cstr_t _msg ) { return CheckPoint(_msg); }
	//! Measures delta time since entering function and stores it with accompanying message in message queue
	inline ctime_t CheckPoint( cstr_t _msg )
	{
		ctime_t dt = tmr->GetRawTime() - entertime;
		msgs.Add().Printf(_T("Inside %s: \"%s\" after %i ms"), msg.c_str(), _msg, dt);
		return dt;
	}
private:
	// Function name
	DynString msg;
	// Construct time
	ctime_t entertime;
	// Our timer
	PTimer tmr;
	// Make startup faster by sharing a timer this way
	static SafePtr<CTTimer> SharedTimer;
	// Message Queue
	static ArrayVal<String> msgs;
	// Instance Counter
	static int ProfCount;
};
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
} // namespace citk
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#endif // !CITK_PROFILER_H_INCLUDED
///////////////////////////////// [citk_Profiler.h] END
/*
#include "Devices/citk_Tracker.h"
#include "Devices/citk_UserTracker.h"
#include "Devices/citk_TrackerHardwareIO.h"
#include "Devices/citk_Joystick.h"
#include "Devices/citk_JoystickInfo.h"
#include "Devices/citk_UserJoystick.h"
*/
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#undef CITK_API
#define CITK_API
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#endif // !ONLY_VERSION_INFO
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
#endif // !_CITKUTILS_H_INCLUDED_
///////////////////////////////// [_citkUtils.h] END
